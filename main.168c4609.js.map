{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tbody","rows","querySelectorAll","rowsWithData","forEach","i","contains","push","addEventListener","e","target","tagName","index","cellIndex","sort","row1","row2","cell1","children","lastElementChild","textContent","replace","cell2","isNaN","localeCompare","append"],"mappings":";AAAA,aAaA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAXA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAQF,SAASC,cAAc,SAC/BE,EAAOH,SAASI,iBAAiB,MACjCC,EAAe,GAErB,EAAIF,GAAMG,QAAQ,SAAAC,GACZL,EAAMM,SAASD,IACjBF,EAAaI,KAAKF,KAItBR,EAAMW,iBAAiB,QAAS,SAACC,GAC3BA,GAAqB,OAArBA,EAAEC,OAAOC,QAATF,CAIEG,IAAAA,EAAQH,EAAEC,OAAOG,UAEjBC,EAAOX,EAAaW,KAAK,SAACC,EAAMC,GAC9BC,IAAAA,EAASF,EAAKG,SAASN,KAAWG,EAAKI,iBACzCJ,EAAKG,SAASN,GAAOQ,YAAYC,QAAQ,QAAS,IAClDN,EAAKG,SAASN,GAAOQ,YAEnBE,EAASN,EAAKE,SAASN,KAAWI,EAAKG,iBACzCH,EAAKE,SAASN,GAAOQ,YAAYC,QAAQ,QAAS,IAClDL,EAAKE,SAASN,GAAOQ,YAErBG,OAAAA,MAAMN,GACDA,EAAMO,cAAcF,GAEnBL,EAAQK,IAIpBtB,EAAMyB,OAANzB,MAAAA,EAAgBc,EAAAA","file":"main.168c4609.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = document.querySelector('tbody');\nconst rows = document.querySelectorAll('tr');\nconst rowsWithData = [];\n\n[...rows].forEach(i => {\n  if (tbody.contains(i)) {\n    rowsWithData.push(i);\n  }\n});\n\ntable.addEventListener('click', (e) => {\n  if (e.target.tagName !== 'TH') {\n    return;\n  }\n\n  const index = e.target.cellIndex;\n\n  const sort = rowsWithData.sort((row1, row2) => {\n    const cell1 = (row1.children[index] === row1.lastElementChild)\n      ? row1.children[index].textContent.replace(/[$,]/g, '')\n      : row1.children[index].textContent;\n\n    const cell2 = (row2.children[index] === row2.lastElementChild)\n      ? row2.children[index].textContent.replace(/[$,]/g, '')\n      : row2.children[index].textContent;\n\n    if (isNaN(cell1)) {\n      return cell1.localeCompare(cell2);\n    } else {\n      return (cell1 - cell2);\n    };\n  });\n\n  tbody.append(...sort);\n});\n"]}